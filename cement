#!/usr/bin/env python3

import sys
import os
import argparse
import subprocess
import shutil
import logging
import xml.etree.ElementTree as ET

parser = argparse.ArgumentParser()
parser.add_argument("config", help="gneiss config file")
parser.add_argument("gneiss_root", help="gneiss repository")
parser.add_argument("-b", "--build_dir", help="build directory", default="build")
parser.add_argument("-r", "--root_fs", help="use separate rootfs", default="build")
parser.add_argument("-v", "--verbose", help="verbose output", action="store_true")
parser.add_argument("paths", help="component search paths", nargs="*")

def get_component_name(libname):
    return libname[13:-3]

def build_init(root, outdir, default_args, logger):
    args = default_args + ["-P", "init",
            "-aP", root,
            "-aP", root + "/init",
            "-aP", root + "/lib",
            "-XGNEISS_ROOT=" + root,
            "-XCEMENT_OBJECT_DIR=" + os.path.join(outdir, "init"),
            "-XCEMENT_LIB_OBJECT_DIR=" + os.path.join(outdir, "libobjects/"),
            "-XCEMENT_LIBRARY_DIR=" + os.path.join(outdir, "libs")]
    logger.debug(args)
    return gprbuild(args)

def build_component(name, root, paths, outdir, default_args, logger):
    args = default_args + ["-P", name, "-aP", root,
                           "-XGNEISS_ROOT=" + root,
                           "-XCEMENT_OBJECT_DIR=" + os.path.join(outdir, os.path.join("components", name)),
                           "-XCEMENT_LIB_OBJECT_DIR=" + os.path.join(outdir, "libobjects/"),
                           "-XCEMENT_LIBRARY_DIR=" + os.path.join(outdir, "libs"),
                           "-XCEMENT_COMPONENT_DIR=" + os.path.join(outdir, "libcomponents")]
    for p in paths:
        args.extend(["-aP", p])
    logger.debug(args)
    return gprbuild(args)

def gprbuild(args):
    return subprocess.call(["gprbuild"] + args)

def find(name, path):
    for root, dirs, files in os.walk(path):
        if name in files:
            return os.path.join(root, name)

def extract_init(build_dir, target_dir):
    try:
        os.mkdir(target_dir)
    except FileExistsError:
        pass
    shutil.copy2(find("init", os.path.join(build_dir, "init")), target_dir)

def extract_components(build_dir, target_dir, components):
    try:
        os.mkdir(target_dir)
    except FileExistsError:
        pass
    for c in components:
        shutil.copy2(find(c, os.path.join(build_dir, "libcomponents")), target_dir)

def get_component_files(xml_file):
    config_root = ET.parse(xml_file).getroot()
    components = set()
    for c_tag in config_root.findall("component"):
        c = c_tag.get("file")
        if c.startswith("libcomponent_") and c.endswith(".so"):
            components.add(c)
        else:
            raise ValueError(c)
    return components

if __name__ == "__main__":
    args = parser.parse_args(sys.argv[1:])
    logger = logging.getLogger("Cement")
    logger.setLevel(logging.DEBUG if args.verbose else logging.INFO);
    fmt = logging.Formatter("%(levelname)s: %(message)s")
    sh = logging.StreamHandler()
    sh.setFormatter(fmt)
    logger.addHandler(sh)
    gprargs = ["-XGNEISS_ROOT=" + os.path.abspath(args.gneiss_root)]
    logger.info("Gneiss root at " + gprargs[0])
    build_dir = os.path.abspath(args.build_dir)
    root_dir = os.path.abspath(args.root_fs)
    components = get_component_files(args.config)
    logger.info("Preparing init...")
    default_args = ["-p", "-XCEMENT_BUILD_STEP=prepare", "--db", os.path.join(os.path.abspath(args.gneiss_root), "gprconfig_db")]
    if args.verbose:
        default_args.append("-v")
    if build_init(os.path.abspath(args.gneiss_root), build_dir, default_args, logger) > 0:
        logger.error("Preparation of init failed")
        exit(1)
    for c in components:
        logger.info("Preparing " + c + "...")
        if build_component(get_component_name(c),
                           os.path.abspath(args.gneiss_root),
                           [os.path.abspath(p) for p in args.paths],
                           build_dir,
                           default_args,
                           logger) > 0:
            logger.error("Preparation of " + c + " failed")
            exit(1)
    logger.info("Compiling init...")
    default_args = ["-p", "-XCEMENT_BUILD_STEP=compile"]
    if args.verbose:
        default_args.append("-v")
    if build_init(os.path.abspath(args.gneiss_root), build_dir, default_args, logger) > 0:
        logger.error("Compilation of init failed")
        exit(1)
    for c in components:
        logger.info("Compiling " + c + "...")
        if build_component(get_component_name(c),
                           os.path.abspath(args.gneiss_root),
                           [os.path.abspath(p) for p in args.paths],
                           build_dir,
                           default_args,
                           logger) > 0:
            logger.error("Compilation of " + c + " failed")
            exit(1)
    logger.info("Extracting results...")
    try:
        os.mkdir(root_dir)
    except FileExistsError:
        pass
    bindir = os.path.join(root_dir, "bin")
    try:
        os.mkdir(bindir)
    except FileExistsError:
        pass
    libdir = os.path.join(root_dir, "lib")
    try:
        os.mkdir(libdir)
    except FileExistsError:
        pass
    extract_init(build_dir, bindir)
    extract_components(build_dir, libdir, components)
    logger.info("Finished.")
